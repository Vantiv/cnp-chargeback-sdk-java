group 'com.vantiv'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    functionalTestCompile.extendsFrom testCompile
    functionalTestRuntime.extendsFrom testRuntime
    generateJAXB.extendsFrom mainRuntime
}

sourceSets {
    main{
        java{
            srcDirs += "$buildDir/generated"
        }
    }
    functionalTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

dependencies {
    compile group:'com.jcraft', name:'jsch', version:'0.1.54'
    compile group:'commons-io', name:'commons-io', version:'2.5'
    compile group:'org.apache.httpcomponents', name:'httpclient', version:'4.5.2'
    testCompile group: 'junit', name: 'junit', version: '4.12'

    generateJAXB group:'com.sun.xml.bind', name:'jaxb-core', version:'2.2.7'
    generateJAXB group:'com.sun.xml.bind', name:'jaxb-impl', version:'2.2.5-5'
    generateJAXB group:'com.sun.xml.bind', name:'jaxb-xjc', version:'2.2.5'
}


clean {
    // temporary, we need to change the tests to generate output inside build folder
    delete 'test'
}


test {
    reports.junitXml.destination = "$buildDir/test-results/unit"
    reports.html.destination = "$buildDir/reports/tests/unit"
}


task generateJaxbClasses() {
    compileJava.dependsOn it

    ext.bindingsFile = "src/main/xsd/bindings.xml"
    ext.generatedDir = "${buildDir}/generated"

    inputs.file bindingsFile
    outputs.dir generatedDir

    doFirst {
        mkdir generatedDir
    }

    doLast {
        ant.taskdef(name: "xjc", classname:"com.sun.tools.xjc.XJCTask", classpath:configurations.generateJAXB.asPath)
        ant.xjc(destdir:"${generatedDir}", package: "com.cnp.sdk.generate", binding:bindingsFile, extension:'true'){
            schema(dir:"src/main/xsd/", includes:"chargeback-api-v2.1.xsd,litleChargebackWebService_v1.0.xsd")
        }
    }
}

task testFunctional(type:Test, dependsOn: functionalTestClasses){
    check.dependsOn it
    classpath = project.sourceSets.functionalTest.runtimeClasspath
    mustRunAfter test
    testClassesDir = file(project.sourceSets.functionalTest.output.classesDir)
    reports.junitXml.destination = "$buildDir/test-results/functional"
    reports.html.destination = "$buildDir/reports/tests/functional"
}
